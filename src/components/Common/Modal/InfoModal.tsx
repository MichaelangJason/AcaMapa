/* eslint-disable @typescript-eslint/no-unused-vars */
import Modal from "react-modal";
import React, {
  useEffect,
  useState,
  useRef,
  useCallback,
  useMemo,
} from "react";
import Image from "next/image";
import remarkGfm from "remark-gfm";
import Markdown from "react-markdown";
import remarkToc from "remark-toc";
import { useAppDispatch, useAppSelector } from "@/store/hooks";
import { clearIsInfoModalOpen } from "@/store/slices/localDataSlice";
import DeleteIcon from "@/public/icons/delete.svg";
import ScrollBar from "../ScrollBar";
import { t, I18nKey, Language } from "@/lib/i18n";

Modal.setAppElement("html");

// REMINDER: this component and its styles are mainly generated by AI
const InfoModal = ({ onClose }: { onClose?: () => void }) => {
  const dispatch = useAppDispatch();
  const isInfoModalOpen = useAppSelector(
    (state) => state.localData.isInfoModalOpen,
  );
  const [currentTab, setCurrentTab] = useState(0);
  const [markdownSource, setMarkdownSource] = useState("");
  const [headings, setHeadings] = useState<
    { id: string; text: string; level: number }[]
  >([]);
  const [isLoading, setIsLoading] = useState(true);
  const contentRef = useRef<HTMLDivElement>(null);
  const tocRef = useRef<HTMLDivElement>(null);
  const lang = useAppSelector((state) => state.userData.lang) as Language;

  const tabs = useMemo(() => {
    return [{ title: "Tutorial", src: "/tutorial.md" }];
  }, []);

  const handleClose = useCallback(() => {
    onClose?.();
    dispatch(clearIsInfoModalOpen());
  }, [dispatch, onClose]);

  useEffect(() => {
    setIsLoading(true);
    fetch(tabs[currentTab].src)
      .then((res) => res.text())
      .then((text) => {
        setMarkdownSource(text);

        // extract headings for TOC
        const headingRegex = /^(#{1,6})\s+(.+)$/gm;
        const extractedHeadings: { id: string; text: string; level: number }[] =
          [];

        let match;
        while ((match = headingRegex.exec(text)) !== null) {
          const level = match[1].length;
          const text = match[2].trim();
          const id = text
            .toLowerCase()
            .replace(/[^\w\s-]/g, "")
            .replace(/\s+/g, "-");

          extractedHeadings.push({ id: "info-" + id, text, level });
        }

        setHeadings(extractedHeadings);
        setIsLoading(false);
      })
      .catch((error) => {
        console.error("Error fetching markdown:", error);
        setIsLoading(false);
      });
  }, [currentTab, tabs]);

  const scrollToHeading = (id: string) => {
    const element = document.getElementById(id);
    console.log(element?.textContent);
    if (element) {
      element.scrollIntoView({ behavior: "smooth" });
    }
  };

  return (
    <Modal
      isOpen={isInfoModalOpen}
      onRequestClose={handleClose}
      className="info-modal-content"
      overlayClassName="modal-overlay"
      shouldCloseOnOverlayClick={true}
      shouldCloseOnEsc={true}
      ariaHideApp={false}
    >
      <button className="close-button" onClick={handleClose}>
        <DeleteIcon />
      </button>
      <div className="modal-container">
        <div className="toc-container">
          <ScrollBar
            targetContainerRef={tocRef}
            direction="vertical"
            bindScroll={(cb) => {
              if (!tocRef.current) return;
              tocRef.current.addEventListener("wheel", cb, { passive: false });
            }}
            unbindScroll={(cb) => {
              if (!tocRef.current) return;
              tocRef.current.removeEventListener("wheel", cb);
            }}
          />
          <div className="toc-sidebar scrollbar-hidden" ref={tocRef}>
            {tabs.length > 1 && (
              <div className="tab-selector">
                {tabs.map((tab, index) => (
                  <button
                    key={index}
                    className={`tab-button ${currentTab === index ? "active" : ""}`}
                    onClick={() => setCurrentTab(index)}
                  >
                    {tab.title}
                  </button>
                ))}
              </div>
            )}
            <h2 className="toc-title">{t([I18nKey.TOC], lang)}</h2>
            <div className="toc-links">
              {isLoading ? (
                <div className="loading-toc">Loading...</div>
              ) : headings.length > 0 ? (
                headings.map((heading, index) => (
                  <div
                    key={index}
                    className={`toc-link level-${heading.level}`}
                    onClick={() => scrollToHeading(heading.id)}
                  >
                    {heading.text}
                  </div>
                ))
              ) : (
                <div className="no-headings">No headings found</div>
              )}
            </div>
          </div>
        </div>
        <div className="content-container scrollbar-hidden">
          <ScrollBar
            targetContainerRef={contentRef}
            style={{
              zIndex: 2,
            }}
            direction="vertical"
            bindScroll={(cb) => {
              if (!contentRef.current) return;
              contentRef.current.addEventListener("wheel", cb, {
                passive: false,
              });
            }}
            unbindScroll={(cb) => {
              if (!contentRef.current) return;
              contentRef.current.removeEventListener("wheel", cb);
            }}
          />
          <div className="content-area scrollbar-hidden" ref={contentRef}>
            {isLoading ? (
              <div className="loading-content">Loading content...</div>
            ) : (
              <Markdown
                remarkPlugins={[remarkGfm, [remarkToc, { tight: true }]]}
                components={{
                  img: ({ src, alt }) => {
                    if (!src) return null;

                    if (src instanceof Blob) {
                      return (
                        <Image
                          src={URL.createObjectURL(src)}
                          alt={alt ?? ""}
                          width={2000}
                          height={1250}
                          loading="lazy"
                        />
                      );
                    }

                    return (
                      <Image
                        src={src.startsWith(".") ? src.slice(1) : src}
                        alt={alt!}
                        width={2000}
                        height={1250}
                        loading="lazy"
                        unoptimized={src.endsWith(".gif")}
                      />
                    );
                  },
                  // node is an unwanted prop
                  h1: ({ node, ...props }) => (
                    <h1
                      id={
                        "info-" +
                        props.children
                          ?.toString()
                          .toLowerCase()
                          .replace(/[^\w\s-]/g, "")
                          .replace(/\s+/g, "-")
                      }
                      {...props}
                    />
                  ),
                  h2: ({ node, ...props }) => (
                    <h2
                      id={
                        "info-" +
                        props.children
                          ?.toString()
                          .toLowerCase()
                          .replace(/[^\w\s-]/g, "")
                          .replace(/\s+/g, "-")
                      }
                      {...props}
                    />
                  ),
                  h3: ({ node, ...props }) => (
                    <h3
                      id={
                        "info-" +
                        props.children
                          ?.toString()
                          .toLowerCase()
                          .replace(/[^\w\s-]/g, "")
                          .replace(/\s+/g, "-")
                      }
                      {...props}
                    />
                  ),
                  h4: ({ node, ...props }) => (
                    <h4
                      id={
                        "info-" +
                        props.children
                          ?.toString()
                          .toLowerCase()
                          .replace(/[^\w\s-]/g, "")
                          .replace(/\s+/g, "-")
                      }
                      {...props}
                    />
                  ),
                  h5: ({ node, ...props }) => (
                    <h5
                      id={
                        "info-" +
                        props.children
                          ?.toString()
                          .toLowerCase()
                          .replace(/[^\w\s-]/g, "")
                          .replace(/\s+/g, "-")
                      }
                      {...props}
                    />
                  ),
                  h6: ({ node, ...props }) => (
                    <h6
                      id={
                        "info-" +
                        props.children
                          ?.toString()
                          .toLowerCase()
                          .replace(/[^\w\s-]/g, "")
                          .replace(/\s+/g, "-")
                      }
                      {...props}
                    />
                  ),
                }}
              >
                {markdownSource}
              </Markdown>
            )}
          </div>
        </div>
      </div>
    </Modal>
  );
};

export default InfoModal;
